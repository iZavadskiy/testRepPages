{"version":3,"sources":["components/image.js","components/row.js","api/api.js","reducers/actions.js","components/page.js","App.js","reducers/navigation.js","reducers/getImages.js","reducers/index.js","serviceWorker.js","index.js"],"names":["Image","image","highlight","ref","useRef","useEffect","current","scrollIntoView","behavior","block","className","src","farm","server","id","secret","alt","loading","Row","props","useState","isVisible","setIsVisible","rowPosition","getBoundingClientRect","top","Fragment","images","map","index","key","position","table","getPhotos","count","dispatch","axios","get","getUrl","then","response","type","payload","data","photos","photo","catch","error","console","log","isDelay","mapImagesToRow","array","subarray","i","length","slice","connect","state","navigation","moveToRight","moveToLeft","moveToDown","moveToUp","getData","loadMore","onKeyDown","event","preventDefault","row","onWheel","e","func","deltaY","handleScroll","delay","setTimeout","tabIndex","imgs","App","initState","concat","mainReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.77d51e4e.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\n\r\nconst Image = ({image, highlight}) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(()=> {\r\n        highlight && ref.current.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'center',\r\n        });\r\n    }, [highlight])\r\n\r\n    return(\r\n        <div className=\"image--preview\" ref={ref}>\r\n            <img\r\n                src={`https://farm${image.farm}.staticflickr.com/${image.server}/${image.id}_${image.secret}_q.jpg`}\r\n                className={`${highlight ? 'image--highlight' : ''}`}\r\n                alt=\"loading\"\r\n                loading=\"lazy\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image;","import React, {useRef, useEffect, useState, useLayoutEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Image from \"./image\";\r\n\r\nconst Row = props => {\r\n    const [isVisible, setIsVisible] = useState(true);\r\n    const ref = useRef();\r\n\r\n    useEffect(()=> {\r\n        let rowPosition = ref.current.getBoundingClientRect().top;\r\n        if(rowPosition > 1020 || rowPosition < -300){\r\n            setIsVisible(false)\r\n        }else{\r\n            setIsVisible(true)\r\n        }\r\n    })\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"images--row\" ref={ref}>\r\n                    {\r\n                        isVisible && props.images.map((image, index) => (\r\n                            <Image key={image.id} image={image} highlight={index === props.position.table}/>\r\n                        ))\r\n                    }\r\n                </div>\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default Row;","import axios from 'axios'\r\nimport {getImages} from \"../reducers/actions\";\r\n\r\nconst getUrl = count =>\r\n    (`https://www.flickr.com/services/rest/?method=flickr.photos.getPopular&api_key=37c722755bfbfc32994675bcafd3ce31&user_id=35034348999%40N01&per_page=${count}&format=json&nojsoncallback=1`);\r\n\r\n\r\nexport const getPhotos = (count) => (dispatch) => {\r\n    axios.get(getUrl(count))\r\n        .then(function (response) {\r\n            dispatch(getImages(response.data.photos.photo)) //тут вообще все надо было бы сделать через красивый pipe\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n}\r\n","\r\n\r\nexport const moveRight = () => ({\r\n    type: \"MOVE_RIGHT\"\r\n});\r\n\r\nexport const moveLeft = () => ({\r\n    type: 'MOVE_LEFT'\r\n});\r\n\r\nexport const moveDown = () => ({\r\n    type: 'MOVE_DOWN'\r\n});\r\n\r\nexport const moveUp = () => ({\r\n    type: 'MOVE_UP'\r\n});\r\n\r\nexport const getImages = (images) => ({\r\n    type: 'GET_IMAGES',\r\n    payload: images,\r\n})","import React, {useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Row from \"./row\";\r\nimport {moveRight, moveLeft, moveDown, moveUp} from '../reducers/actions'\r\nimport { getPhotos } from '../api/api';\r\n\r\nlet isDelay = false;\r\nfunction debounce(func, delay) {\r\n    return () => {\r\n        if (isDelay) {\r\n            return false;\r\n        }else {\r\n            isDelay = true;\r\n            func();\r\n            setTimeout(() => {\r\n                isDelay = false\r\n            }, delay);\r\n        }\r\n    };\r\n}\r\n\r\nconst Page = props => {\r\n\r\n    const handleKeys = event => {\r\n      switch(event.key) {\r\n          case 'ArrowUp':\r\n              event.preventDefault();\r\n              props.moveToUp();\r\n              break;\r\n          case 'ArrowDown':\r\n              event.preventDefault();\r\n              props.moveToDown();\r\n              break;\r\n          case 'ArrowLeft':\r\n              event.preventDefault();\r\n              props.moveToLeft();\r\n              break;\r\n          case 'ArrowRight':\r\n              event.preventDefault();\r\n              props.moveToRight();\r\n              break;\r\n          default: event.preventDefault();\r\n      }\r\n\r\n        if(props.position.row === props.images.length-2){\r\n            props.loadMore();\r\n        }\r\n    }\r\n\r\n    const handleScroll =  (e) => {\r\n        if(e.deltaY > 0){\r\n            props.moveToDown();\r\n        }else{\r\n            props.moveToUp();\r\n        }\r\n    }\r\n\r\n   useEffect(()=>{\r\n       props.getData();\r\n   },[]);\r\n\r\n    return(\r\n        <div className=\"App\"\r\n             onKeyDown={handleKeys}\r\n             onWheel={e=>debounce(()=>handleScroll(e),500)()}\r\n             tabIndex=\"0\">\r\n            {props.images && props.images.map((imgs, index)=>(\r\n                <Row key={imgs.id} images={imgs} position={props.position.row === index && props.position}/>\r\n            )) }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapImagesToRow = array => {\r\n    let rowSize = 5;\r\n    let subarray = [];\r\n    for (let i = 0; i <array.length/rowSize; i++){\r\n        subarray[i] = array.slice((i*rowSize), (i*rowSize) + rowSize);\r\n    }\r\n    return subarray;\r\n}\r\n\r\nconst props = state => ({\r\n    position: state.navigation,\r\n    images: mapImagesToRow(state.images.images),\r\n});\r\n\r\nconst actions = dispatch => ({\r\n    moveToRight: () => dispatch(moveRight()),\r\n    moveToLeft: () => dispatch(moveLeft()),\r\n    moveToDown: () => dispatch(moveDown()),\r\n    moveToUp: () => dispatch(moveUp()),\r\n    getData: () => dispatch(getPhotos(50)),\r\n    loadMore: () => dispatch(getPhotos(40)),\r\n})\r\n\r\n\r\nexport default connect(props, actions)(Page);","import React from 'react';\nimport './App.css';\nimport Page from \"./components/page\";\n\nfunction App() {\n  return (\n    <div>\n      <Page/>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nconst initState = {\r\n    row: 0,\r\n    table: 0,\r\n}\r\n\r\nconst navigation = (state = initState, { type }) => {\r\n    switch (type) {\r\n        case 'MOVE_UP':\r\n            return  state.row > 0 ?\r\n                {row: state.row - 1, table: state.table} :\r\n                state;\r\n        case 'SCROLL_UP':\r\n            return  state.row > 0 ?\r\n                {row: state.row - 1, table: state.table} :\r\n                state;\r\n        case 'MOVE_DOWN':\r\n            return  {row: state.row + 1, table: state.table};\r\n        case 'SCROLL_DOWN':\r\n            return  {row: state.row + 1, table: state.table};\r\n        case 'MOVE_LEFT':\r\n            return state.table > 0 ?\r\n                {row: state.row, table: state.table - 1} :\r\n                state;\r\n        case 'MOVE_RIGHT':\r\n            return state.table < 4 ?\r\n                {row: state.row, table: state.table + 1} :\r\n                state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default navigation;","const initState = {\r\n    images: []\r\n}\r\n\r\nconst images = (state = initState, { type, payload }) => {\r\n    switch (type) {\r\n        case 'GET_IMAGES':\r\n            return {images: state.images.concat(payload)};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default images;","import { combineReducers } from 'redux';\r\nimport navigation from \"./navigation\";\r\nimport images from \"./getImages\";\r\n\r\n\r\nconst mainReducer = combineReducers({\r\n    navigation,\r\n    images\r\n});\r\n\r\n\r\nexport default mainReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport mainReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(mainReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(), applyMiddleware(reduxThunk));\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}